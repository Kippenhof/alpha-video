"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Constants_1 = require("./Constants");
const IO_1 = require("../utils/IO");
const mustache = require("mustache");
const path = require("path");
const Logger_1 = require("../utils/Logger");
const chalk = require("chalk");
const Dependencies_1 = require("./Dependencies");
const util_1 = require("util");
const Config_1 = require("./Config");
const ImageSnapshotDifference_1 = require("../render/diff/ImageSnapshotDifference");
const axios_1 = require("axios");
class Processor {
    constructor(mResults, mExplicitConfig, mProcessParms) {
        this.mResults = mResults;
        this.mExplicitConfig = mExplicitConfig;
        this.mProcessParms = mProcessParms;
    }
    static run(results, explicitConfig, parms) {
        return new Processor(results, explicitConfig, parms).generate();
    }
    generate() {
        const substitute = {};
        if (util_1.isNullOrUndefined(this.mResults)) {
            throw new Error(Constants_1.Constants.NO_INPUT);
        }
        const config = new Config_1.Config(this.logger, this.mExplicitConfig, this.mProcessParms).buildConfig();
        substitute.results = this.mResults;
        substitute.rawResults = JSON.stringify(this.mResults, null, 2);
        substitute.jestStareConfig = config;
        substitute.rawJestStareConfig = JSON.stringify(config, null, 2);
        if (this.mProcessParms && this.mProcessParms.reporter) {
            this.mProcessParms.reporter.jestStareConfig = config;
            substitute.globalConfig = JSON.stringify(this.mProcessParms.reporter.mGlobalConfig, null, 2);
        }
        this.generateReport(config.resultDir, substitute, this.mProcessParms);
        this.collectImageSnapshots(config.resultDir, this.mResults);
        if (config.additionalResultsProcessors != null) {
            this.execute(this.mResults, config.additionalResultsProcessors);
        }
        return this.mResults;
    }
    collectImageSnapshots(resultDir, results) {
        results.testResults.forEach((rootResult) => {
            if (rootResult.numFailingTests) {
                rootResult.testResults.forEach((testResult) => {
                    testResult.failureMessages.forEach((failureMessage) => {
                        if (typeof failureMessage === "string" &&
                            ImageSnapshotDifference_1.ImageSnapshotDifference.containsDiff(failureMessage)) {
                            const diffImagePath = ImageSnapshotDifference_1.ImageSnapshotDifference.parseDiffImagePath(failureMessage);
                            const diffImageName = ImageSnapshotDifference_1.ImageSnapshotDifference.parseDiffImageName(failureMessage);
                            if (IO_1.IO.existsSync(diffImagePath)) {
                                IO_1.IO.mkdirsSync(resultDir + Constants_1.Constants.IMAGE_SNAPSHOT_DIFF_DIR);
                                const reportDiffImagePath = resultDir + Constants_1.Constants.IMAGE_SNAPSHOT_DIFF_DIR + diffImageName;
                                IO_1.IO.copyFileSync(diffImagePath, reportDiffImagePath);
                            }
                        }
                    });
                });
            }
        });
    }
    generateReport(resultDir, substitute, parms) {
        IO_1.IO.mkdirsSync(resultDir);
        IO_1.IO.writeFileSync(resultDir + substitute.jestStareConfig.resultJson, substitute.rawResults);
        if (substitute.jestStareConfig.jestStareConfigJson) {
            IO_1.IO.writeFileSync(resultDir + substitute.jestStareConfig.jestStareConfigJson, substitute.rawJestStareConfig);
        }
        if (substitute.globalConfig && substitute.jestStareConfig.jestGlobalConfigJson) {
            IO_1.IO.writeFileSync(resultDir + substitute.jestStareConfig.jestGlobalConfigJson, substitute.globalConfig);
        }
        if (substitute.jestStareConfig.report != null && !substitute.jestStareConfig.report) {
            return;
        }
        IO_1.IO.writeFileSync(resultDir + substitute.jestStareConfig.resultHtml, mustache.render(this.obtainWebFile(Constants_1.Constants.TEMPLATE_HTML), substitute));
        const cssDir = resultDir + Constants_1.Constants.CSS_DIR;
        IO_1.IO.mkdirsSync(cssDir);
        IO_1.IO.writeFileSync(cssDir + Constants_1.Constants.JEST_STARE_CSS, this.obtainWebFile(Constants_1.Constants.JEST_STARE_CSS));
        const jsDir = resultDir + Constants_1.Constants.JS_DIR;
        IO_1.IO.mkdirsSync(jsDir);
        IO_1.IO.writeFileSync(jsDir + Constants_1.Constants.JEST_STARE_JS, this.obtainJsRenderFile(Constants_1.Constants.JEST_STARE_JS));
        IO_1.IO.mkdirsSync(resultDir + "img/");
        Constants_1.Constants.IMAGES.forEach((image) => {
            const sourceImg = this.obtainWebPath(`img/${image}`);
            const destImg = resultDir + `img/${image}`;
            IO_1.IO.copyFileSync(sourceImg, destImg);
        });
        Dependencies_1.Dependencies.THIRD_PARTY_DEPENDENCIES.forEach((dependency) => {
            const updatedDependency = Object.assign({}, ...[dependency]);
            updatedDependency.targetDir = resultDir + dependency.targetDir;
            this.addThirdParty(updatedDependency);
        });
        if (substitute.jestStareConfig.inlineSource || substitute.jestStareConfig.generatePdf) {
            const htmlContent = mustache.render(this.obtainWebFile(Constants_1.Constants.TEMPLATE_INLINE_SOURCE_HTML), substitute);
            if (substitute.jestStareConfig.inlineSource) {
                const fileNames = substitute.jestStareConfig.resultHtml.split(".");
                fileNames.splice(1, 0, "inline");
                const inlineReportName = fileNames.join(".");
                IO_1.IO.writeFileSync(resultDir + inlineReportName, htmlContent);
                IO_1.IO.removeFileSync(resultDir + substitute.jestStareConfig.resultHtml);
                IO_1.IO.deleteFolderSync(cssDir);
                IO_1.IO.deleteFolderSync(jsDir);
            }
            if (substitute.jestStareConfig.generatePdf) {
                this.printPDF(htmlContent, substitute.jestStareConfig.generatePdfToken).then((pdfBuffer) => {
                    if (pdfBuffer) {
                        IO_1.IO.writeFileSync(resultDir + "test-results.pdf", pdfBuffer);
                    }
                });
            }
        }
        let type = " ";
        type += (parms && parms.reporter) ? Constants_1.Constants.REPORTERS : Constants_1.Constants.TEST_RESULTS_PROCESSOR;
        this.logger.info(Constants_1.Constants.LOGO + type + Constants_1.Constants.LOG_MESSAGE + resultDir + substitute.jestStareConfig.resultHtml + Constants_1.Constants.SUFFIX);
    }
    printPDF(content, token) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const result = yield axios_1.default({
                    method: "post",
                    url: "https://puppeteer.bespoken.io/convertToPdf",
                    data: content,
                    responseType: "arraybuffer",
                    headers: { "x-access-token": token || "" }
                });
                return result.data;
            }
            catch (error) {
                if (error.response) {
                    const errorPayload = Buffer.from(error.response.data).toString("utf8");
                    Logger_1.Logger.get.error(errorPayload);
                }
                else {
                    Logger_1.Logger.get.error(error.message);
                }
            }
        });
    }
    execute(jestTestData, processors) {
        for (const processor of processors) {
            if (processor === Constants_1.Constants.NAME) {
                this.logger.error("Error: In order to avoid infinite loops, " +
                    "jest-stare cannot be listed as an additional processor. Skipping... ");
                continue;
            }
            try {
                require(processor)(jestTestData);
                this.logger.info(Constants_1.Constants.LOGO + " passed results to additional processor " +
                    chalk.default.white("\"" + processor + "\"") + Constants_1.Constants.SUFFIX);
            }
            catch (e) {
                this.logger.error("Error executing additional processor: \"" + processor + "\" " + e);
            }
        }
    }
    addThirdParty(dependency) {
        return __awaiter(this, void 0, void 0, function* () {
            const location = require.resolve(dependency.requireDir + dependency.file);
            yield IO_1.IO.writeFileSync(dependency.targetDir + dependency.file, IO_1.IO.readFileSync(location));
        });
    }
    obtainWebFile(name) {
        return IO_1.IO.readFileSync(path.resolve(__dirname + "/../../web/" + name));
    }
    obtainJsRenderFile(name) {
        return IO_1.IO.readFileSync(path.resolve(__dirname + "/../render/" + name));
    }
    obtainWebPath(name) {
        return path.resolve(__dirname + "/../../web/" + name);
    }
    set logger(logger) {
        this.mLog = logger;
    }
    get logger() {
        if (util_1.isNullOrUndefined(this.mLog)) {
            this.logger = new Logger_1.Logger();
        }
        return this.mLog;
    }
}
exports.Processor = Processor;
//# sourceMappingURL=data:application/json;base64,