"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Constants_1 = require("../Constants");
class TestSummary {
    static create(results) {
        const elements = [];
        const div = document.createElement("div");
        div.classList.add("my-3", "p-3", "bg-white", "rounded", "box-shadow", "summary");
        const h5 = document.createElement("h5");
        h5.classList.add("border-bottom", "pb-2", "display-5", "summary-title");
        h5.textContent = "Summary";
        div.appendChild(h5);
        div.id = "test-summary";
        elements.push(div);
        results.testResults.forEach((testResult, pathIndex) => {
            if (testResult.testResults == null) {
                console.error("Unexpected testResults field missing");
                if (testResult.assertionResults != null) {
                    console.warn("Attempting to use assertionResults: results are unpredictable");
                    testResult.testResults = testResult.assertionResults;
                }
            }
            const divMap = new Map();
            const testCountMap = new Map();
            const testCountArray = [];
            const testTitleDiv = document.createElement("div");
            testTitleDiv.classList.add("summary-test-suite");
            const testFileLink = document.createElement("a");
            const isFail = testResult.numFailingTests > 0;
            const testStatus = document.createElement("strong");
            testStatus.classList.add("summary-test-label");
            if (!isFail) {
                testStatus.classList.add("pass");
                testStatus.textContent = "PASS";
            }
            else {
                testStatus.classList.add("fail");
                testStatus.textContent = "FAIL";
            }
            const testFileLine = document.createElement("strong");
            testFileLine.classList.add("summary-test-label", "path");
            testFileLine.textContent = testResult.testFilePath;
            testFileLink.href = "#" + testResult.testFilePath;
            testFileLink.appendChild(testStatus);
            testFileLink.appendChild(testFileLine);
            testTitleDiv.appendChild(testFileLink);
            div.appendChild(testTitleDiv);
            testResult.testResults.forEach((test, testIndex) => {
                if (test.ancestorTitles.length > 0) {
                    test.ancestorTitles.forEach((title, index) => {
                        const titlesCopy = test.ancestorTitles.slice();
                        titlesCopy.splice(index + 1);
                        const key = titlesCopy.join(TestSummary.JOIN_CHAR);
                        if (!divMap.has(key)) {
                            const nestDiv = document.createElement("div");
                            nestDiv.classList.add("summary-ancestor-box");
                            nestDiv.id = key;
                            divMap.set(key, nestDiv);
                            if (index === 0) {
                                div.appendChild(nestDiv);
                            }
                            else {
                                titlesCopy.pop();
                                const parentKey = titlesCopy.join(TestSummary.JOIN_CHAR);
                                divMap.get(parentKey).appendChild(nestDiv);
                                const href = "#" + key + TestSummary.JOIN_CHAR
                                    + pathIndex + TestSummary.JOIN_CHAR + testIndex
                                    + TestSummary.JOIN_CHAR + index;
                                testCountMap.set(key, {
                                    locale: test.ancestorTitles[0],
                                    title,
                                    href,
                                    passingTests: 0,
                                    pendingTests: 0,
                                    failingTests: 0
                                });
                                testCountArray.push(key);
                            }
                        }
                        if (index !== 0) {
                            const testCount = testCountMap.get(key);
                            if (test.status === Constants_1.Constants.TEST_STATUS_PASS) {
                                testCount.passingTests = testCount.passingTests + 1;
                            }
                            if (test.status === Constants_1.Constants.TEST_STATUS_PEND) {
                                testCount.pendingTests = testCount.pendingTests + 1;
                            }
                            if (test.status === Constants_1.Constants.TEST_STATUS_FAIL) {
                                testCount.failingTests = testCount.failingTests + 1;
                            }
                            testCountMap.set(key, testCount);
                        }
                    });
                }
            });
            const locales = [...new Set(testCountArray.map((key) => testCountMap.get(key).locale))];
            testCountArray.forEach((key) => {
                const testCount = testCountMap.get(key);
                const testCountSpan = document.createElement("strong");
                testCountSpan.classList.add("summary-test-count");
                const testTotal = testCount.passingTests + testCount.pendingTests + testCount.failingTests;
                testCount.testTotal = testTotal;
                const testCountText = "[" + testCount.passingTests + "/" + testTotal + "]";
                testCountSpan.textContent = testCountText;
                const containerDiv = divMap.get(key);
                const ancestorLink = document.createElement("a");
                ancestorLink.textContent = locales.length > 1 ? `(${testCount.locale}) ${testCount.title}`
                    : testCount.title;
                ancestorLink.href = testCount.href;
                ancestorLink.classList.add("summary-test-label", "path");
                containerDiv.appendChild(TestSummary.getSimbolSpanFromStatus(testCount));
                containerDiv.appendChild(ancestorLink);
                containerDiv.appendChild(testCountSpan);
            });
        });
        return elements;
    }
    static getSimbolSpanFromStatus({ testTotal, passingTests, pendingTests, failingTests }) {
        const span = document.createElement("span");
        span.classList.add("summary-test-label", "test", "smallLabel");
        if (failingTests > 0) {
            span.textContent = "X";
            span.classList.add("fail");
        }
        else if (pendingTests === testTotal) {
            span.textContent = "O";
            span.classList.add("pending");
        }
        else if (passingTests + pendingTests === testTotal) {
            span.textContent = "âœ“";
            span.classList.add("pass");
        }
        return span;
    }
}
exports.TestSummary = TestSummary;
TestSummary.JOIN_CHAR = ".";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdFN1bW1hcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcmVuZGVyL3N1bW1hcnkvVGVzdFN1bW1hcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw0Q0FBeUM7QUFPekMsTUFBYSxXQUFXO0lBY2IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUE4QjtRQUMvQyxNQUFNLFFBQVEsR0FBa0IsRUFBRSxDQUFDO1FBRW5DLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFtQixDQUFDO1FBQzVELEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFakYsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQXVCLENBQUM7UUFDOUQsRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDeEUsRUFBRSxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUM7UUFFM0IsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNwQixHQUFHLENBQUMsRUFBRSxHQUFHLGNBQWMsQ0FBQztRQUN4QixRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRW5CLE9BQU8sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxFQUFFLFNBQVMsRUFBRSxFQUFFO1lBUWxELElBQUksVUFBVSxDQUFDLFdBQVcsSUFBSSxJQUFJLEVBQUU7Z0JBRWhDLE9BQU8sQ0FBQyxLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQztnQkFDdEQsSUFBSyxVQUFrQixDQUFDLGdCQUFnQixJQUFJLElBQUksRUFBRTtvQkFFOUMsT0FBTyxDQUFDLElBQUksQ0FBQywrREFBK0QsQ0FBQyxDQUFDO29CQUM5RSxVQUFVLENBQUMsV0FBVyxHQUFJLFVBQWtCLENBQUMsZ0JBQWdCLENBQUM7aUJBQ2pFO2FBQ0o7WUFFRCxNQUFNLE1BQU0sR0FBNkIsSUFBSSxHQUFHLEVBQXVCLENBQUM7WUFDeEUsTUFBTSxZQUFZLEdBQXFCLElBQUksR0FBRyxFQUFlLENBQUM7WUFDOUQsTUFBTSxjQUFjLEdBQWEsRUFBRSxDQUFDO1lBRXBDLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFtQixDQUFDO1lBQ3JFLFlBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFFakQsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQXNCLENBQUM7WUFDdEUsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLGVBQWUsR0FBRyxDQUFDLENBQUM7WUFFOUMsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQW9CLENBQUM7WUFFdkUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztZQUMvQyxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNULFVBQVUsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNqQyxVQUFVLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQzthQUNuQztpQkFBTTtnQkFDSCxVQUFVLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDakMsVUFBVSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUM7YUFDbkM7WUFFRCxNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBb0IsQ0FBQztZQUN6RSxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN6RCxZQUFZLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQyxZQUFZLENBQUM7WUFDbkQsWUFBWSxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsVUFBVSxDQUFDLFlBQVksQ0FBQztZQUVsRCxZQUFZLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3JDLFlBQVksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7WUFFdkMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUN2QyxHQUFHLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBRTlCLFVBQVUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxFQUFFO2dCQUMvQyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtvQkFDaEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUU7d0JBRXpDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLENBQUM7d0JBQy9DLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO3dCQUM3QixNQUFNLEdBQUcsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQzt3QkFDbkQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7NEJBQ2xCLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFtQixDQUFDOzRCQUNoRSxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDOzRCQUM5QyxPQUFPLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQzs0QkFFakIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7NEJBRXpCLElBQUksS0FBSyxLQUFLLENBQUMsRUFBRTtnQ0FDYixHQUFHLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDOzZCQUM1QjtpQ0FBTTtnQ0FDSCxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUM7Z0NBQ2pCLE1BQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dDQUN6RCxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQ0FFM0MsTUFBTSxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxXQUFXLENBQUMsU0FBUztzQ0FDeEMsU0FBUyxHQUFHLFdBQVcsQ0FBQyxTQUFTLEdBQUcsU0FBUztzQ0FDN0MsV0FBVyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7Z0NBQ3BDLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO29DQUNsQixNQUFNLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7b0NBQzlCLEtBQUs7b0NBQ0wsSUFBSTtvQ0FDSixZQUFZLEVBQUUsQ0FBQztvQ0FDZixZQUFZLEVBQUUsQ0FBQztvQ0FDZixZQUFZLEVBQUUsQ0FBQztpQ0FDbEIsQ0FBQyxDQUFDO2dDQUNILGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7NkJBRTVCO3lCQUNKO3dCQUVELElBQUksS0FBSyxLQUFLLENBQUMsRUFBRTs0QkFDYixNQUFNLFNBQVMsR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDOzRCQUN4QyxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUsscUJBQVMsQ0FBQyxnQkFBZ0IsRUFBRTtnQ0FDNUMsU0FBUyxDQUFDLFlBQVksR0FBRyxTQUFTLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQzs2QkFDdkQ7NEJBRUQsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLHFCQUFTLENBQUMsZ0JBQWdCLEVBQUU7Z0NBQzVDLFNBQVMsQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7NkJBQ3ZEOzRCQUVELElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxxQkFBUyxDQUFDLGdCQUFnQixFQUFFO2dDQUM1QyxTQUFTLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDOzZCQUN2RDs0QkFDRCxZQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQzt5QkFDcEM7b0JBQ0wsQ0FBQyxDQUFDLENBQUM7aUJBQ047WUFDTCxDQUFDLENBQUMsQ0FBQztZQUVILE1BQU0sT0FBTyxHQUFJLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUV6RixjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7Z0JBQzNCLE1BQU0sU0FBUyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3hDLE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFvQixDQUFDO2dCQUMxRSxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO2dCQUVsRCxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDLFlBQVksQ0FBQztnQkFDM0YsU0FBUyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7Z0JBQ2hDLE1BQU0sYUFBYSxHQUFHLEdBQUcsR0FBRyxTQUFTLENBQUMsWUFBWSxHQUFHLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxDQUFDO2dCQUMzRSxhQUFhLENBQUMsV0FBVyxHQUFHLGFBQWEsQ0FBQztnQkFFMUMsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDckMsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQXNCLENBQUM7Z0JBQ3RFLFlBQVksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxTQUFTLENBQUMsS0FBSyxFQUFFO29CQUN0RixDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztnQkFDdEIsWUFBWSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDO2dCQUNuQyxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFFekQsWUFBWSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsdUJBQXVCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDekUsWUFBWSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFDdkMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM1QyxDQUFDLENBQUMsQ0FBQztRQUVQLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxRQUFRLENBQUM7SUFDcEIsQ0FBQztJQVNPLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBQztRQUN4RixNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBb0IsQ0FBQztRQUMvRCxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFFL0QsSUFBSSxZQUFZLEdBQUcsQ0FBQyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzlCO2FBQU0sSUFBSSxZQUFZLEtBQUssU0FBUyxFQUFFO1lBQ25DLElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ2pDO2FBQU0sSUFBSSxZQUFZLEdBQUcsWUFBWSxLQUFLLFNBQVMsRUFBRTtZQUNsRCxJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQztZQUN2QixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUM5QjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7O0FBMUxMLGtDQTJMQztBQXJMMEIscUJBQVMsR0FBRyxHQUFHLENBQUMifQ==